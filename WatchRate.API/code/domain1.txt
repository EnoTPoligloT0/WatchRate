Domain Model for MovieRate Platform
Aggregates
1. Movie Aggregate
Root: Movie

{
  "id": {"value": "00000000-0000-0000-0000-000000000000"},
  "dbid": {"value": "tt000000"},
  "title": "The Shawshank Redemption",
  "description": "Two imprisoned men bond over a number of years...",
  "year": 1994,
  "runtime": 142,
  "maturityRating": "R",
  "averageRating": 9.3,
  "posterUrl": "https://...",
  "backdropUrl": "https://...",
  "trailerUrl": "https://...",
  "streamingUrls": [
    {
      "platform": "Netflix",
      "url": "https://..."
    }
  ],
  "genres": [
    {
      "id": {"value": "00000000-0000-0000-0000-000000000000"},
      "name": "Drama"
    }
  ],
  "cast": [
    {
      "id": {"value": "00000000-0000-0000-0000-000000000000"},
      "personId": {
        "value": "00000000-0000-0000-0000-000000000000"},
      "character": "Andy Dufresne",
      "order": 1
    }
  ],
  "crew": [
    {
      "id": {
        "value": "00000000-0000-0000-0000-000000000000"
      },
      "personId": {
        "value": "00000000-0000-0000-0000-000000000000"
      },
      "role": "Director",
      "department": "Directing"
    }
  ],
  "createdDateTime": "2024-01-01T00:00:00.0000000Z",
  "updatedDateTime": "2024-01-01T00:00:00.0000000Z"
}
2. Person Aggregate
Root: Person

{
  "id": {
    "value": "00000000-0000-0000-0000-000000000000"
  },
  "name": "Tim Robbins",
  "biography": "Born in West Covina, California...",
  "birthDate": "1958-10-16T00:00:00.0000000Z",
  "birthPlace": "West Covina, California, USA",
  "profileImageUrl": "https://...",
  "createdDateTime": "2024-01-01T00:00:00.0000000Z",
  "updatedDateTime": "2024-01-01T00:00:00.0000000Z"
}
3. User Aggregate
Root: User

{
  "id": {
    "value": "00000000-0000-0000-0000-000000000000"
  },
  "email": "user@example.com",
  "username": "moviefan123",
  "passwordHash": "hashedPassword",
  "profilePictureUrl": "https://...",
  "watchlist": [
    {
      "id": {
        "value": "00000000-0000-0000-0000-000000000000"
      },
      "movieId": {
        "value": "00000000-0000-0000-0000-000000000000"
      },
      "addedDateTime": "2024-01-01T00:00:00.0000000Z"
    }
  ],
  "favorites": [
    {
      "id": {
        "value": "00000000-0000-0000-0000-000000000000"
      },
      "movieId": {
        "value": "00000000-0000-0000-0000-000000000000"
      },
      "addedDateTime": "2024-01-01T00:00:00.0000000Z"
    }
  ],
  "ratings": [
    {
      "id": {
        "value": "00000000-0000-0000-0000-000000000000"
      },
      "movieId": {
        "value": "00000000-0000-0000-0000-000000000000"
      },
      "value": 9,
      "review": "One of the best movies ever made...",
      "createdDateTime": "2024-01-01T00:00:00.0000000Z",
      "updatedDateTime": "2024-01-01T00:00:00.0000000Z"
    }
  ],
  "createdDateTime": "2024-01-01T00:00:00.0000000Z",
  "updatedDateTime": "2024-01-01T00:00:00.0000000Z"
}
Value Objects
Common
MovieId
PersonId
UserId
RatingId
WatchlistItemId
FavoriteId
StreamingUrl
RatingValue (1-10)
Movie-specific
Genre
CastMember
CrewMember
MaturityRating
Domain Events
Movie
MovieCreated
MovieUpdated
MovieDeleted
MovieRatingUpdated
User
UserCreated
UserRatingAdded
UserRatingUpdated
UserRatingRemoved
MovieAddedToWatchlist
MovieRemovedFromWatchlist
MovieAddedToFavorites
MovieRemovedFromFavorites
Database Schema
-- Enum for Maturity Ratings
CREATE TYPE maturity_rating AS ENUM ('G', 'PG', 'PG13', 'R', 'NC17');

-- Movies Table
CREATE TABLE Movies
(
    Id              UUID PRIMARY KEY,
    ImdbId          TEXT            NOT NULL,
    Title           TEXT            NOT NULL,
    Description     TEXT,
    Year            INT             NOT NULL,
    ReleaseDate     DATE,
    Runtime         INT,
    MaturityRating  maturity_rating NOT NULL,
    AverageRating   DECIMAL(3, 1),
    TotalRatings    INT,
    PosterUrl       TEXT,
    BackdropUrl     TEXT,
    TrailerUrl      TEXT,
    CreatedDateTime TIMESTAMP       NOT NULL,
    UpdatedDateTime TIMESTAMP       NOT NULL
);

-- Persons Table
CREATE TABLE Persons
(
    Id              UUID PRIMARY KEY,
    Name            TEXT      NOT NULL,
    Biography       TEXT,
    BirthDate       DATE,
    BirthPlace      TEXT,
    ProfileImageUrl TEXT,
    CreatedDateTime TIMESTAMP NOT NULL,
    UpdatedDateTime TIMESTAMP NOT NULL
);

-- Users Table
CREATE TABLE Users
(
    Id                UUID PRIMARY KEY,
    Email             TEXT      NOT NULL UNIQUE,
    Username          TEXT      NOT NULL UNIQUE,
    PasswordHash      TEXT      NOT NULL,
    ProfilePictureUrl TEXT,
    CreatedDateTime   TIMESTAMP NOT NULL,
    UpdatedDateTime   TIMESTAMP NOT NULL
);

-- Genres Table
CREATE TABLE Genres
(
    Id   UUID PRIMARY KEY,
    Name TEXT NOT NULL UNIQUE
);

-- MovieCast Table
CREATE TABLE MovieCast
(
    Id        UUID PRIMARY KEY,
    MovieId   UUID NOT NULL REFERENCES Movies (Id) ON DELETE CASCADE,
    PersonId  UUID NOT NULL REFERENCES Persons (Id) ON DELETE CASCADE,
    Character TEXT NOT NULL,
    "Order"   INT  NOT NULL
);

-- MovieCrew Table
CREATE TABLE MovieCrew
(
    Id         UUID PRIMARY KEY,
    MovieId    UUID NOT NULL REFERENCES Movies (Id) ON DELETE CASCADE,
    PersonId   UUID NOT NULL REFERENCES Persons (Id) ON DELETE CASCADE,
    Role       TEXT NOT NULL,
    Department TEXT NOT NULL
);

-- MovieGenres Table
CREATE TABLE MovieGenres
(
    MovieId UUID NOT NULL REFERENCES Movies (Id) ON DELETE CASCADE,
    GenreId UUID NOT NULL REFERENCES Genres (Id) ON DELETE CASCADE,
    PRIMARY KEY (MovieId, GenreId)
);

-- StreamingPlatforms Table
CREATE TABLE StreamingPlatforms
(
    Id       UUID PRIMARY KEY,
    MovieId  UUID NOT NULL REFERENCES Movies (Id) ON DELETE CASCADE,
    Platform TEXT NOT NULL,
    Url      TEXT NOT NULL
);

-- UserRatings Table
CREATE TABLE UserRatings
(
    Id              UUID PRIMARY KEY,
    UserId          UUID      NOT NULL REFERENCES Users (Id) ON DELETE CASCADE,
    MovieId         UUID      NOT NULL REFERENCES Movies (Id) ON DELETE CASCADE,
    Value           INT       NOT NULL CHECK (Value BETWEEN 1 AND 10),
    Review          TEXT,
    CreatedDateTime TIMESTAMP NOT NULL,
    UpdatedDateTime TIMESTAMP NOT NULL,
    UNIQUE (UserId, MovieId)
);

-- UserWatchlist Table
CREATE TABLE UserWatchlist
(
    Id            UUID PRIMARY KEY,
    UserId        UUID      NOT NULL REFERENCES Users (Id) ON DELETE CASCADE,
    MovieId       UUID      NOT NULL REFERENCES Movies (Id) ON DELETE CASCADE,
    AddedDateTime TIMESTAMP NOT NULL,
    UNIQUE (UserId, MovieId)
);

-- UserFavorites Table
CREATE TABLE UserFavorites
(
    Id            UUID PRIMARY KEY,
    UserId        UUID      NOT NULL REFERENCES Users (Id) ON DELETE CASCADE,
    MovieId       UUID      NOT NULL REFERENCES Movies (Id) ON DELETE CASCADE,
    AddedDateTime TIMESTAMP NOT NULL,
    UNIQUE (UserId, MovieId)
);

namespace WatchRate.Domain.Common.Attributes;

public class EfCoreValueConverterAttribute : Attribute
{
    public EfCoreValueConverterAttribute(Type valueConverter)
    {
        ValueConverter = valueConverter;
    }

    public Type ValueConverter { get; }
}

namespace WatchRate.Domain.Common.Models;

public abstract class AggregateRoot<TId> : Entity<TId>, IHasTimestamps where TId : notnull
{
    public DateTime CreatedDateTime { get; set; }
    
    public DateTime UpdatedDateTime { get; set; }
    
    protected AggregateRoot()
    {
    }
    
    protected AggregateRoot(TId id) : base(id)
    {
        CreatedDateTime = DateTime.UtcNow;
        UpdatedDateTime = DateTime.UtcNow;
    }
}

namespace WatchRate.Domain.Common.Models;

public abstract class Entity<TId> : IEquatable<Entity<TId>>
    where TId : notnull
{
    public TId Id { get; protected set; }

    protected Entity(TId id)
    {
        Id = id;
    }
    
    public override bool Equals(object? obj)
    {
        return obj is Entity<TId> entity && Id.Equals(entity.Id);
    }

    public static bool operator ==(Entity<TId> left, Entity<TId> right)
    {
        return left.Equals(right);
    }

    public static bool operator !=(Entity<TId> left, Entity<TId> right)
    {
        return !left.Equals(right);
    }

    public bool Equals(Entity<TId>? other)
    {
        return Equals((object?) other);
    }

    public override int GetHashCode()
    {
        return Id.GetHashCode();
    }
    
#pragma warning disable CS8618
    protected Entity()
#pragma warning restore CS8618
    {
    }

}

namespace WatchRate.Domain.Common.Models;

public interface IEntityId<T, TValue> where T : IEntityId<T, TValue>
{
    TValue Value { get; }

    static abstract T CreateUnique();
    
    static abstract T Create(TValue value);
}

namespace WatchRate.Domain.Common.Models;

public interface IHasTimestamps
{
    DateTime CreatedDateTime { get; set; }
    
    DateTime UpdatedDateTime { get; set; }
}

namespace WatchRate.Domain.Common.Models;
public abstract class ValueObject : IEquatable<ValueObject>
{
    protected abstract IEnumerable<object> GetEqualityComponents();

    public override bool Equals(object? obj)
    {
        if (obj == null || GetType() != obj.GetType())
            return false;
        
        var other = (ValueObject)obj;
        
        return GetEqualityComponents()
            .SequenceEqual(other.GetEqualityComponents());
    }

    public static bool operator ==(ValueObject left, ValueObject right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(ValueObject left, ValueObject right)
    {
        return !Equals(left, right);
    }

    public override int GetHashCode()
    {
        return GetEqualityComponents()
            .Select(x => x?.GetHashCode() ?? 0)
            .Aggregate((x, y) => x ^ y); 
    }

    public bool Equals(ValueObject? other)
    {
        return Equals((object?) other);
    }
}

using WatchRate.Domain.Common.Models;
using WatchRate.Domain.MovieAggregate.ValueObjects;
using WatchRate.Domain.PersonAggregate.ValueObjects;

namespace WatchRate.Domain.MovieAggregate;

public class MovieCrew : Entity<MovieCrewId>
{
    public PersonId PersonId { get; set; }
    public string Role { get; set; }
    public string? Department { get; set; }

    private MovieCrew(MovieCrewId movieCrewId, PersonId personId, string role, string department)
        : base(movieCrewId)
    {
        PersonId = personId;
        Role = role;
        Department = department;
    }

    public static MovieCrew Create(PersonId personId, string role, string department)
    {
        return new MovieCrew(MovieCrewId.CreateUnique() , personId, role, department);
    }
}

using WatchRate.Domain.Common.Models;
using WatchRate.Domain.PersonAggregate.ValueObjects;

namespace WatchRate.Domain.MovieAggregate.Entities;

public class MovieCast : Entity<MovieCastId>
{
    public PersonId PersonId { get; set; }
    public string? Character { get; set; }
    public string? Order { get; set; }

    private MovieCast(MovieCastId movieCastId, PersonId personId, string? character, string? order)
        : base(movieCastId)
    {
        PersonId = personId;
        Character = character;
        Order = order;
    }

    public static MovieCast Create(PersonId personId, string character, string order)
    {
        return new MovieCast(MovieCastId.CreateUnique(), personId, character, order);
    }
}

using WatchRate.Domain.Common.Models;
using WatchRate.Domain.MovieAggregate.ValueObjects;

namespace WatchRate.Domain.MovieAggregate;

public class MovieGenre : Entity<MovieGenreId>
{
    public string Name { get; set; }

    private MovieGenre(MovieGenreId movieGenreId, string name) 
        : base(movieGenreId)
    {
        Name = name;
    }

    public static MovieGenre Create(string name)
    {
        return new MovieGenre(MovieGenreId.CreateUnique(), name);
    }
}

using WatchRate.Domain.Common.Models;
using WatchRate.Domain.MovieAggregate.ValueObjects;

namespace WatchRate.Domain.MovieAggregate;

public class MovieGenre : Entity<MovieGenreId>
{
    public string Name { get; set; }

    private MovieGenre(MovieGenreId movieGenreId, string name) 
        : base(movieGenreId)
    {
        Name = name;
    }

    public static MovieGenre Create(string name)
    {
        return new MovieGenre(MovieGenreId.CreateUnique(), name);
    }
}

using WatchRate.Domain.Common.Models;
using WatchRate.Domain.MovieAggregate.ValueObjects;

namespace WatchRate.Domain.MovieAggregate;

public class MovieGenre : Entity<MovieGenreId>
{
    public string Name { get; set; }

    private MovieGenre(MovieGenreId movieGenreId, string name) 
        : base(movieGenreId)
    {
        Name = name;
    }

    public static MovieGenre Create(string name)
    {
        return new MovieGenre(MovieGenreId.CreateUnique(), name);
    }
}

using WatchRate.Domain.Common.Models;
using WatchRate.Domain.PersonAggregate.ValueObjects;

namespace WatchRate.Domain.PersonAggregate;

public class Person : AggregateRoot<PersonId>
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string? Biography { get; set; }
    public string? BirthDate { get; set; }
    public string? BirthPlace { get; set; }
    public string? ProfileImageUrl { get; set; }
    public DateTime CreatedDateTime { get; set; }
    public DateTime UpdatedDateTime { get; set; }

    private Person(
        PersonId id,
        string firstName,
        string lastName,
        string? biography,
        string? birthDate,
        string? birthPlace,
        string? profileImageUrl,
        DateTime createdDateTime,
        DateTime updatedDateTime)
    {
        FirstName = firstName;
        LastName = lastName;
        Biography = biography;
        BirthDate = birthDate;
        BirthPlace = birthPlace;
        ProfileImageUrl = profileImageUrl;
        CreatedDateTime = createdDateTime;
        UpdatedDateTime = updatedDateTime;
    }

    public static Person Create(string firstName, string lastName, string? biography, string? birthDate, string? birthPlace, string? profileImageUrl, DateTime createdDateTime, DateTime updatedDateTime)
    {
        return new Person(PersonId.CreateUnique(), firstName, lastName, biography, birthDate, birthPlace, profileImageUrl, DateTime.Now, DateTime.Now);
    }
}

using System.Runtime.CompilerServices;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchRate.Domain.Common.Attributes;
using WatchRate.Domain.Common.Models;

namespace WatchRate.Domain.PersonAggregate.ValueObjects;

[EfCoreValueConverter(typeof(PersonIdValueConverter))]
public class PersonId : ValueObject, IEntityId<PersonId, Guid>
{
    public Guid Value { get; }

    public PersonId(Guid value)
    {
        Value = value;
    }
    
    public static PersonId CreateUnique() => new PersonId(Guid.NewGuid());

    public static PersonId Create(Guid value) => new(value);

    protected override IEnumerable<object> GetEqualityComponents()
    {
        yield return Value;
    }

    public class PersonIdValueConverter : ValueConverter<PersonId, Guid>
    {
        public  PersonIdValueConverter () : 
            base(
                id => id.Value,
                value => Create(value)
                ){}
    }
    
}

using WatchRate.Domain.Common.Models;
using WatchRate.Domain.MovieAggregate.ValueObjects;
using WatchRate.Domain.UserAggregate.ValueObjects;

namespace WatchRate.Domain.UserAggregate.Entities;

public class UserFavorite : Entity<UserFavoriteId>
{
    public MovieId MovieId { get; private set; }
    
    public DateTime AddedDateTime { get; private set; }

    private UserFavorite(UserFavoriteId userFavoriteId , MovieId movieId, DateTime addedDateTime)
    : base(userFavoriteId)
    {
        MovieId = movieId;
        AddedDateTime = addedDateTime;
    }

    public static UserFavorite Create(MovieId movieId, DateTime addedDateTime)
    {
        return new UserFavorite(UserFavoriteId.CreateUnique(), movieId, addedDateTime);
    }


using WatchRate.Domain.Common.Models;
using WatchRate.Domain.MovieAggregate.ValueObjects;
using WatchRate.Domain.UserAggregate.ValueObjects;

namespace WatchRate.Domain.UserAggregate.Entities;

public class UserRating : Entity<UserRatingId>
{
    public MovieId MovieId { get; private set; }
    public int? Value { get; private set; }
    public string? Review { get; private set; }
    public DateTime CreatedDateTime { get; private set; }
    public DateTime? UpdatedDateTime { get; private set; }

    private UserRating(UserRatingId userRatingId, MovieId movieId, int? value, string? review, DateTime createdDateTime, DateTime? updatedDateTime)
    : base(userRatingId)
    {
        MovieId = movieId;
        Value = value;
        Review = review;
        CreatedDateTime = createdDateTime;
        UpdatedDateTime = updatedDateTime;
    }

    public static UserRating Create(MovieId movieId, int? value, string? review, DateTime createdDateTime, DateTime? updatedDateTime)
    {
        return new UserRating(UserRatingId.CreateUnique(), movieId, value, review, DateTime.Now, DateTime.Now);
    }
}

using WatchRate.Domain.Common.Models;
using WatchRate.Domain.MovieAggregate;
using WatchRate.Domain.MovieAggregate.ValueObjects;
using WatchRate.Domain.UserAggregate.ValueObjects;

namespace WatchRate.Domain.UserAggregate.Entities;

public class UserWatchlist : Entity<UserWatchlistId>
{
    public MovieId MovieId { get; private set; }
    public DateTime CreatedDateTime { get; private set; }

    private UserWatchlist(UserWatchlistId userWatchlistId, MovieId movieId, DateTime createdDateTime)
    : base(userWatchlistId)
    {
        MovieId = movieId;
        CreatedDateTime = createdDateTime;
    }

    public static UserWatchlist Create(MovieId movieId, DateTime createdDateTime)
    {
        return new UserWatchlist(UserWatchlistId.CreateUnique(), movieId, DateTime.Now);
    }
}

using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchRate.Domain.Common.Attributes;
using WatchRate.Domain.Common.Models;
using WatchRate.Domain.UserAggregate.Entities;

namespace WatchRate.Domain.UserAggregate.ValueObjects;

[EfCoreValueConverter(typeof(UserFavoriteIdValueConverter))]
public class UserFavoriteId : ValueObject, IEntityId<UserFavoriteId, Guid>
{
    public Guid Value { get; }
    
    public UserFavoriteId(Guid value)
    {
        Value = value;
    }
    
    public static UserFavoriteId CreateUnique() => new(Guid.NewGuid());

    public static UserFavoriteId Create(Guid value) => new(value);

    protected override IEnumerable<object> GetEqualityComponents()
    {
        yield return Value;
    }
    public class UserFavoriteIdValueConverter : ValueConverter<UserFavoriteId, Guid>
    {
        public UserFavoriteIdValueConverter()
            : base(
                id => id.Value,
                value => Create(value)
            ) { }
    }
    
}

using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchRate.Domain.Common.Attributes;
using WatchRate.Domain.Common.Models;
using WatchRate.Domain.StreamingAggregate.ValueObjects;

namespace WatchRate.Domain.UserAggregate.ValueObjects;

[EfCoreValueConverter(typeof(UserIdValueConverter))]
public class UserId : ValueObject, IEntityId<UserId, Guid>
{
    public Guid Value { get; }
    
    public UserId(Guid value)
    {
        Value = value;
    }
    
    public static UserId CreateUnique() => new(Guid.NewGuid());

    public static UserId Create(Guid value) => new(value);

    protected override IEnumerable<object> GetEqualityComponents()
    {
        yield return Value;
    }
    public class UserIdValueConverter : ValueConverter<UserId, Guid>
    {
        public UserIdValueConverter()
            : base(
                id => id.Value,
                value => Create(value)
            ) { }
    }
    
}

using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchRate.Domain.Common.Attributes;
using WatchRate.Domain.Common.Models;
using WatchRate.Domain.UserAggregate.Entities;

namespace WatchRate.Domain.UserAggregate.ValueObjects;

[EfCoreValueConverter(typeof(UserRatingIdValueConverter))]
public class UserRatingId : ValueObject, IEntityId<UserRatingId, Guid>
{
    public Guid Value { get; }
    public UserRatingId(Guid value)
    {
        Value = value;
    }
    
    public static UserRatingId CreateUnique() => new (Guid.NewGuid());

    public static UserRatingId Create(Guid value) => new (value);
    
    protected override IEnumerable<object> GetEqualityComponents()
    {
        yield return Value;
    }
    
    public class 
    UserRatingIdValueConverter : ValueConverter<UserRatingId, Guid>
    {
        public UserRatingIdValueConverter()
            : base(
                id => id.Value,
                value => Create(value)
            ) { }
    }
}

namespace WatchRate.Domain.UserAggregate.ValueObjects;

using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchRate.Domain.Common.Attributes;
using WatchRate.Domain.Common.Models;


[EfCoreValueConverter(typeof(UserWatchlistIdValueConverter))]
public class UserWatchlistId : ValueObject, IEntityId<UserWatchlistId, Guid>
{
    public Guid Value { get; }
    
    public UserWatchlistId(Guid value)
    {
        Value = value;
    }
    
    public static UserWatchlistId CreateUnique() => new(Guid.NewGuid());

    public static UserWatchlistId Create(Guid value) => new(value);

    protected override IEnumerable<object> GetEqualityComponents()
    {
        yield return Value;
    }
    public class UserWatchlistIdValueConverter : ValueConverter<UserWatchlistId, Guid>
    {
        public UserWatchlistIdValueConverter()
            : base(
                id => id.Value,
                value => Create(value)
            ) { }
    }
    
}

using WatchRate.Domain.Common.Models;
using WatchRate.Domain.UserAggregate.Entities;
using WatchRate.Domain.UserAggregate.ValueObjects;

namespace WatchRate.Domain.UserAggregate;

public class User : AggregateRoot<UserId>
{
    private readonly List<UserWatchlistId> _userWatchlistIds = new();
    private readonly List<UserFavoriteId> _userFavoriteIds = new();
    private readonly List<UserRatingId> _userRatingIds = new();

    public string Email { get; set; }
    public string UserName { get; set; }
    public string PasswordHash { get; set; }
    public string? ProfilePictureUrl { get; set; }
    public DateTime CreatedDateTime { get; set; }
    public DateTime CreatedDate { get; set; }

    public IReadOnlyList<UserWatchlistId> UserWatchlistIds => _userWatchlistIds.AsReadOnly();
    public IReadOnlyList<UserFavoriteId> UserFavoriteIds => _userFavoriteIds.AsReadOnly();
    public IReadOnlyList<UserRatingId> UserRatingIds => _userRatingIds.AsReadOnly();

    private User(UserId userId,
        string email,
        string userName,
        string passwordHash,
        string profilePictureUrl,
        DateTime createdDateTime,
        DateTime createdDate)
        : base(userId)
    {
        Email = email;
        UserName = userName;
        PasswordHash = passwordHash;
        ProfilePictureUrl = profilePictureUrl;
        CreatedDateTime = createdDateTime;
        CreatedDate = createdDate;
    }

    public static User Create(string email, string userName, string passwordHash, string profilePictureUrl)
    {
        return new User(UserId.CreateUnique(), email, userName, passwordHash, profilePictureUrl, DateTime.Now,
            DateTime.Now);
    }
}

namespace WatchRate.Domain.MovieAggregate.ValueObjects;
public enum MaturityRating
{
    G,
    PG,
    PG13,
    R,
    NC17,
    TVY,
    TVY7,
    TVG,
    TVPG,
    TV14,
    TVMA
}

using WatchRate.Domain.Common.Attributes;
using WatchRate.Domain.Common.Models;

namespace WatchRate.Domain.MovieAggregate;

[EfCoreValueConverter(typeof(MovieCastId))]
public class MovieCastId : ValueObject, IEntityId<MovieCastId, Guid> 
{
    public Guid Value { get; }
    public MovieCastId(Guid value)
    {
        Value = value;
    }
    
    public static MovieCastId CreateUnique() => new(Guid.NewGuid());

    public static MovieCastId Create(Guid value) => new(value);
    
    protected override IEnumerable<object> GetEqualityComponents()
    {
        yield return Value;
    }

}

using WatchRate.Domain.Common.Attributes;
using WatchRate.Domain.Common.Models;

namespace WatchRate.Domain.MovieAggregate.ValueObjects;

[EfCoreValueConverter(typeof(MovieCrewId))]
public class MovieCrewId : ValueObject, IEntityId<MovieCrewId, Guid>
{
    public Guid Value { get; }

    private MovieCrewId(Guid value)
    {
        Value = value;
    }

    public static MovieCrewId CreateUnique() => new(Guid.NewGuid());
    public static MovieCrewId Create(Guid value) => new(value);

    protected override IEnumerable<object> GetEqualityComponents()
    {
        yield return Value;
    }
}

using WatchRate.Domain.Common.Models;

namespace WatchRate.Domain.MovieAggregate.ValueObjects;

public class MovieGenreId : ValueObject, IEntityId<MovieGenreId, Guid> 
{
    public Guid Value { get; }

    private MovieGenreId(Guid value)
    {
        Value = value;
    }
            
    public static MovieGenreId CreateUnique() => new(Guid.NewGuid());
    public static MovieGenreId Create(Guid value) => new(value);
            
    protected override IEnumerable<object> GetEqualityComponents()
    {
        yield return Value;
    }
}

using WatchRate.Domain.Common.Models;

namespace WatchRate.Domain.MovieAggregate.ValueObjects;

public sealed class MovieId : ValueObject, IEntityId<MovieId, Guid>
{
    public Guid Value { get; }

    private MovieId(Guid value)
    {
        Value = value;
    }
    
    public static MovieId CreateUnique() => new MovieId(Guid.NewGuid());
    public static MovieId Create(Guid value) => new(value);
    
    protected override IEnumerable<object> GetEqualityComponents()
    {
        yield return Value;
    }
}

using WatchRate.Domain.Common.Models;

namespace WatchRate.Domain.MovieAggregate.ValueObjects;

public sealed class MovieId : ValueObject, IEntityId<MovieId, Guid>
{
    public Guid Value { get; }

    private MovieId(Guid value)
    {
        Value = value;
    }
    
    public static MovieId CreateUnique() => new MovieId(Guid.NewGuid());
    public static MovieId Create(Guid value) => new(value);
    
    protected override IEnumerable<object> GetEqualityComponents()
    {
        yield return Value;
    }
}

using Microsoft.EntityFrameworkCore;
using WatchRate.Domain.Common.Attributes;
using WatchRate.Domain.MovieAggregate;
using WatchRate.Domain.PersonAggregate;
using WatchRate.Domain.UserAggregate;
using WatchRate.Infrastucture.Persistance.Extensions;

namespace WatchRate.Infrastucture.Persistance;

public class WatchRateDbContext : DbContext
{
    public DbSet<Movie> Movies { get; set; } = null!;
    public DbSet<Person> Persons { get; set; } = null!;
    public DbSet<User> Users { get; set; } = null!;
    
    public WatchRateDbContext(DbContextOptions<WatchRateDbContext> options) : base(options) { }
    
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(WatchRateDbContext).Assembly);
        
        modelBuilder.AddStronglyTypedIdValueConverters<EfCoreValueConverterAttribute>();
    }
}